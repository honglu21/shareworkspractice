// Generated by Selenium IDE

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class SSNGeneratorTest {
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;
    private File _fSSN;
    private File _fSIN;
    private String _filePathSSN = "/Users/hong.lu/ssn.csv";
    private String _filePathSIN = "/Users/hong.lu/sin.csv";
    private FileWriter fwSSN;
    private FileWriter fwSIN;

    @BeforeAll
    public void setUp() {
        System.setProperty("webdriver.chrome.driver","/Users/hong.lu/chromedriver");
        ChromeOptions options = new ChromeOptions();
        options.addArguments("headless");
        driver = new ChromeDriver(options);
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }

    @AfterAll
    public void tearDown() {

        driver.quit();
    }
    public String waitForWindow(int timeout) {
        try {
            Thread.sleep(timeout);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Set<String> whNow = driver.getWindowHandles();
        Set<String> whThen = (Set<String>) vars.get("window_handles");
        if (whNow.size() > whThen.size()) {
            whNow.removeAll(whThen);
        }
        return whNow.iterator().next();
    }

    public void generateSSN(String url) throws InterruptedException {

        driver.get(url);

        driver.manage().window().setSize(new Dimension(1234, 802));

        driver.findElement(By.cssSelector(".generator-snippet .btn")).click();

        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        String ssn = driver.findElement(By.id("copyToClipboard-ssn")).getAttribute("value");

        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        System.out.println("ssn " + ssn + " created ");

        // writing

        BufferedWriter out = new BufferedWriter(fwSSN);
        try {
            out.write(ssn);
            out.newLine();
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void generateSIN(String url) throws InterruptedException {

        driver.get(url);

        driver.manage().window().setSize(new Dimension(1234, 802));

        driver.findElement(By.cssSelector(".generator-snippet .btn")).click();

        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        String sin = driver.findElement(By.id("copyToClipboard-sin")).getAttribute("value");

        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));

        System.out.println("sin " + sin + " created ");

        // writing

        BufferedWriter out = new BufferedWriter(fwSSN);
        try {
            out.write(sin);
            out.newLine();
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void generate3000SIN() throws InterruptedException {
        _fSIN = new File(_filePathSIN);
        if (!_fSIN.exists()) {
            try {
                _fSIN.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        fwSIN = null;
        try {
            fwSIN = new FileWriter(_filePathSIN);
        } catch (IOException e) {
            e.printStackTrace();
        }


        for (int i = 0; i < 3000; i++) {
            generateSIN("https://theonegenerator.com/generators/documents/sin-generator/");
        }

        try {
            fwSIN.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @Test
    public void generate3000SSN() throws InterruptedException {
        _fSSN = new File(_filePathSSN);
        if (!_fSSN.exists()) {
            try {
                _fSSN.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        fwSSN = null;
        try {
            fwSSN = new FileWriter(_filePathSSN);
        } catch (IOException e) {
            e.printStackTrace();
        }

        for (int i = 0; i < 3000; i++) {
            generateSSN("https://theonegenerator.com/generators/documents/ssn-generator/");
        }

        try {
            fwSSN.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}

